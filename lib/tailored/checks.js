'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.is_array = exports.is_object = exports.is_bound = exports.is_startsWith = exports.is_type = exports.is_capture = exports.is_headTail = exports.is_wildcard = exports.is_variable = exports.is_function = exports.is_undefined = exports.is_null = exports.is_symbol = exports.is_boolean = exports.is_string = exports.is_number = undefined;

var _types = require('./types');

function _typeof(obj) { return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj; }

function is_number(value) {
  return typeof value === 'number';
}

function is_string(value) {
  return typeof value === 'string';
}

function is_boolean(value) {
  return typeof value === 'boolean';
}

function is_symbol(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'symbol';
}

function is_null(value) {
  return value === null;
}

function is_undefined(value) {
  return typeof value === 'undefined';
}

function is_function(value) {
  return Object.prototype.toString.call(value) == '[object Function]';
}

function is_variable(value) {
  return value instanceof _types.Variable;
}

function is_wildcard(value) {
  return value instanceof _types.Wildcard;
}

function is_headTail(value) {
  return value instanceof _types.HeadTail;
}

function is_capture(value) {
  return value instanceof _types.Capture;
}

function is_type(value) {
  return value instanceof _types.Type;
}

function is_startsWith(value) {
  return value instanceof _types.StartsWith;
}

function is_bound(value) {
  return value instanceof _types.Bound;
}

function is_object(value) {
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
}

function is_array(value) {
  return Array.isArray(value);
}

exports.is_number = is_number;
exports.is_string = is_string;
exports.is_boolean = is_boolean;
exports.is_symbol = is_symbol;
exports.is_null = is_null;
exports.is_undefined = is_undefined;
exports.is_function = is_function;
exports.is_variable = is_variable;
exports.is_wildcard = is_wildcard;
exports.is_headTail = is_headTail;
exports.is_capture = is_capture;
exports.is_type = is_type;
exports.is_startsWith = is_startsWith;
exports.is_bound = is_bound;
exports.is_object = is_object;
exports.is_array = is_array;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhaWxvcmVkL2NoZWNrcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUlBLFNBQVMsU0FBUyxDQUFDLEtBQVUsRUFBVztBQUN0QyxTQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQztDQUNsQzs7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFVLEVBQVU7QUFDckMsU0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7Q0FDbEM7O0FBRUQsU0FBUyxVQUFVLENBQUMsS0FBVSxFQUFXO0FBQ3ZDLFNBQU8sT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDO0NBQ25DOztBQUVELFNBQVMsU0FBUyxDQUFDLEtBQVUsRUFBVztBQUN0QyxTQUFPLFFBQU8sS0FBSyx5Q0FBTCxLQUFLLE9BQUssUUFBUSxDQUFDO0NBQ2xDOztBQUVELFNBQVMsT0FBTyxDQUFDLEtBQVUsRUFBVztBQUNwQyxTQUFPLEtBQUssS0FBSyxJQUFJLENBQUM7Q0FDdkI7O0FBRUQsU0FBUyxZQUFZLENBQUMsS0FBVSxFQUFXO0FBQ3pDLFNBQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDO0NBQ3JDOztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQVUsRUFBVztBQUN4QyxTQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxtQkFBbUIsQ0FBQztDQUNyRTs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFVLEVBQVc7QUFDeEMsU0FBTyxLQUFLLG1CQS9CTCxRQUFRLEFBK0JpQixDQUFDO0NBQ2xDOztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQVUsRUFBVztBQUN4QyxTQUFPLEtBQUssbUJBbkNLLFFBQVEsQUFtQ08sQ0FBQztDQUNsQzs7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFVLEVBQVc7QUFDeEMsU0FBTyxLQUFLLG1CQXZDZSxRQUFRLEFBdUNILENBQUM7Q0FDbEM7O0FBRUQsU0FBUyxVQUFVLENBQUMsS0FBVSxFQUFXO0FBQ3ZDLFNBQU8sS0FBSyxtQkEzQ3lCLE9BQU8sQUEyQ2IsQ0FBQztDQUNqQzs7QUFFRCxTQUFTLE9BQU8sQ0FBQyxLQUFVLEVBQVc7QUFDcEMsU0FBTyxLQUFLLG1CQS9Da0MsSUFBSSxBQStDdEIsQ0FBQztDQUM5Qjs7QUFFRCxTQUFTLGFBQWEsQ0FBQyxLQUFVLEVBQVc7QUFDMUMsU0FBTyxLQUFLLG1CQW5Ed0MsVUFBVSxBQW1ENUIsQ0FBQztDQUNwQzs7QUFFRCxTQUFTLFFBQVEsQ0FBQyxLQUFVLEVBQVc7QUFDckMsU0FBTyxLQUFLLG1CQXZEb0QsS0FBSyxBQXVEeEMsQ0FBQztDQUMvQjs7QUFFRCxTQUFTLFNBQVMsQ0FBQyxLQUFVLEVBQVc7QUFDdEMsU0FBTyxRQUFPLEtBQUsseUNBQUwsS0FBSyxPQUFLLFFBQVEsQ0FBQztDQUNsQzs7QUFFRCxTQUFTLFFBQVEsQ0FBQyxLQUFVLEVBQVc7QUFDckMsU0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0NBQzdCOztRQUdDLFNBQVMsR0FBVCxTQUFTO1FBQ1QsU0FBUyxHQUFULFNBQVM7UUFDVCxVQUFVLEdBQVYsVUFBVTtRQUNWLFNBQVMsR0FBVCxTQUFTO1FBQ1QsT0FBTyxHQUFQLE9BQU87UUFDUCxZQUFZLEdBQVosWUFBWTtRQUNaLFdBQVcsR0FBWCxXQUFXO1FBQ1gsV0FBVyxHQUFYLFdBQVc7UUFDWCxXQUFXLEdBQVgsV0FBVztRQUNYLFdBQVcsR0FBWCxXQUFXO1FBQ1gsVUFBVSxHQUFWLFVBQVU7UUFDVixPQUFPLEdBQVAsT0FBTztRQUNQLGFBQWEsR0FBYixhQUFhO1FBQ2IsUUFBUSxHQUFSLFFBQVE7UUFDUixTQUFTLEdBQVQsU0FBUztRQUNULFFBQVEsR0FBUixRQUFRIiwiZmlsZSI6InRhaWxvcmVkL2NoZWNrcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB7IFZhcmlhYmxlLCBXaWxkY2FyZCwgSGVhZFRhaWwsIENhcHR1cmUsIFR5cGUsIFN0YXJ0c1dpdGgsIEJvdW5kIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gaXNfbnVtYmVyKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzX3N0cmluZyh2YWx1ZTogYW55KTogYm9vbGVhbntcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGlzX2Jvb2xlYW4odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIGlzX3N5bWJvbCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnO1xufVxuXG5mdW5jdGlvbiBpc19udWxsKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc191bmRlZmluZWQodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gaXNfZnVuY3Rpb24odmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5mdW5jdGlvbiBpc192YXJpYWJsZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFZhcmlhYmxlO1xufVxuXG5mdW5jdGlvbiBpc193aWxkY2FyZCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFdpbGRjYXJkO1xufVxuXG5mdW5jdGlvbiBpc19oZWFkVGFpbCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEhlYWRUYWlsO1xufVxuXG5mdW5jdGlvbiBpc19jYXB0dXJlKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQ2FwdHVyZTtcbn1cblxuZnVuY3Rpb24gaXNfdHlwZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFR5cGU7XG59XG5cbmZ1bmN0aW9uIGlzX3N0YXJ0c1dpdGgodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTdGFydHNXaXRoO1xufVxuXG5mdW5jdGlvbiBpc19ib3VuZCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEJvdW5kO1xufVxuXG5mdW5jdGlvbiBpc19vYmplY3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuZnVuY3Rpb24gaXNfYXJyYXkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5cbmV4cG9ydCB7XG4gIGlzX251bWJlcixcbiAgaXNfc3RyaW5nLFxuICBpc19ib29sZWFuLFxuICBpc19zeW1ib2wsXG4gIGlzX251bGwsXG4gIGlzX3VuZGVmaW5lZCxcbiAgaXNfZnVuY3Rpb24sXG4gIGlzX3ZhcmlhYmxlLFxuICBpc193aWxkY2FyZCxcbiAgaXNfaGVhZFRhaWwsXG4gIGlzX2NhcHR1cmUsXG4gIGlzX3R5cGUsXG4gIGlzX3N0YXJ0c1dpdGgsXG4gIGlzX2JvdW5kLFxuICBpc19vYmplY3QsXG4gIGlzX2FycmF5XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
